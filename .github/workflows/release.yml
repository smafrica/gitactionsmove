name: release
on:
  workflow_dispatch:
    inputs:
      src_folder:
        description: 'Folder to copy from'    # Descrizione del parametro di origine
        required: true
        default: 'source_folder'             # Valore predefinito
      dest_folder:
        description: 'Folder to copy to'      # Descrizione del parametro di destinazione
        required: true
        default: 'destination_folder'        # Valore predefinito

jobs:
  copy-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy files
        run: |
          base_path="flux-configs"       # Percorso di base per la cartella di origine
          
          # Percorsi completi unendo i percorsi base con i parametri dell'utente
          src_folder="$base_path/${{ github.event.inputs.src_folder }}"
          echo "src_folder: $src_folder"
          dest_folder="$base_path/${{ github.event.inputs.dest_folder }}"
          echo "dest_folder: $dest_folder"

          # Nome dinamico del file zip che include i percorsi e il timestamp
          timestamp=$(date +%Y%m%d%H%M%S)
          zip_file="${${{ github.event.inputs.src_folder }}//\//_}_${${{ github.event.inputs.dest_folder }}//\//_}_$timestamp.zip"
          echo "ZIP file name: $zip_file"

          # Esporta le variabili per gli step successivi
          echo "::set-output name=src_folder::$src_folder"
          echo "::set-output name=dest_folder::$dest_folder"
          echo "::set-output name=zip_file::$zip_file"
      - name: Zip and move destination folder content
        run: |
          mkdir -p "$dest_folder"   # Assicurati che la cartella di destinazione esista

          # Comprimi il contenuto della cartella di destinazione solo se contiene file
          if [ "$(ls -A $dest_folder)" ]; then
            zip -r "$zip_file" "$dest_folder"
          else
            echo "Destination folder is empty, skipping ZIP creation."
          fi

          # Se il file ZIP Ã¨ stato creato, spostalo nella cartella "backup" presente a partire dalla base del repository
          mkdir -p "backup"   # Assicurati che la cartella di destinazione esista
          if [ -f "$zip_file" ]; then
            mv "$zip_file" ./backup
          fi

      - name: Clear destination folder
        run: |
          # Cancella il contenuto della cartella di destinazione
          rm -rf "$dest_folder/*"

      - name: Copy files
        run: |
          mkdir -p "$dest_folder"                # Crea la cartella di destinazione se non esiste
          cp -r "$src_folder/." "$dest_folder/"  # Copia i file dalla sorgente alla destinazione

      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add "$dest_folder/*" "$zip_file"
          git commit -m "Copy files from $src_folder to $dest_folder and create backup"
          git push