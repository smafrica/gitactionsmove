name: K8S Release

on:
  workflow_dispatch:
    inputs:
      dest_env:
        description: 'Destination Environments [''qa'', ''prod'']'
        required: true
        default: 'destination_folder'
      tag:
        description: 'Git tag to checkout (e.g., v1.1.10)'
        required: true
        default: 'v0.0.1'

jobs:
  copy-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository and fetch all tags
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure tags are included
          ref: main  # Checkout the main branch (or your default branch)

      - name: Check if tag exists
        id: check_tag
        run: |
          tag="${{ github.event.inputs.tag }}"
          # Check if the tag exists in the repository
          if git rev-parse "refs/tags/$tag" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $tag does not exist. Stopping the workflow."
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            exit 1  # Stop workflow if tag does not exist
          fi

      - name: Checkout specific tag
        if: steps.check_tag.outputs.tag_exists == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.tag }}  # Only checkout if tag exists

      - name: Set paths and determine source folder
        id: set_paths
        run: |
          base_path="flux-configs"  # Base path for the source and destination directories
          
          dest_env_input="${{ github.event.inputs.dest_env }}"

          # Mappa per determinare la cartella di origine in base alla destinazione
          declare -A folder_map
          folder_map["qa"]="dev"
          folder_map["prod"]="qa"

          # Verifica se la destinazione Ã¨ valida (qa o prod)
          if [[ -v folder_map["$dest_env_input"] ]]; then
            src_env_input="${folder_map[$dest_env_input]}"
          else
            echo "Invalid destination folder: $dest_env_input. Only 'qa' or 'prod' are allowed."
            exit 1  # Stop the workflow if destination folder is invalid
          fi

          # Set full paths
          src_folder="$base_path/$src_env_input"
          dest_folder="$base_path/$dest_env_input"

          echo "src_folder: $src_folder"
          echo "dest_folder: $dest_folder"

          # Check if the source folder exists
          if [ ! -d "$src_folder" ]; then
            echo "Source folder does not exist: $src_folder. Stopping the workflow."
            exit 1  # Stop the workflow if the source folder does not exist
          fi

          # Check if the destination folder exists
          if [ ! -d "$dest_folder" ]; then
            echo "Destination folder does not exist: $dest_folder. Stopping the workflow."
            exit 1  # Stop the workflow if the destination folder does not exist
          fi

          # Dynamic zip file name with timestamp
          timestamp=$(date +%Y%m%d%H%M%S)
          zip_file_path="backup/${dest_env_input//\//_}"
          zip_file_name="${src_env_input//\//_}_$timestamp.zip"
          echo "ZIP file name: $zip_file_name"
          
          # Set output variables for use in later steps
          echo "src_folder=$src_folder" >> $GITHUB_OUTPUT
          echo "dest_folder=$dest_folder" >> $GITHUB_OUTPUT
          echo "zip_file_path=$zip_file_path" >> $GITHUB_OUTPUT
          echo "zip_file_name=$zip_file_name" >> $GITHUB_OUTPUT

      - name: Zip and move destination folder content
        run: |
          mkdir -p "${{ steps.set_paths.outputs.dest_folder }}"   # Ensure destination folder exists

          # Compress the content of the destination folder only if it contains files
          if [ "$(ls -A ${{ steps.set_paths.outputs.dest_folder }})" ]; then
            zip -r "${{ steps.set_paths.outputs.zip_file_name }}" "${{ steps.set_paths.outputs.dest_folder }}"
          else
            echo "Destination folder is empty, skipping ZIP creation."
          fi

          # If the ZIP file was created, move it to the base folder
          mkdir -p "${{ steps.set_paths.outputs.zip_file_path }}"   # Ensure zip file path exists
          if [ -f "${{ steps.set_paths.outputs.zip_file_name }}" ]; then
            mv "${{ steps.set_paths.outputs.zip_file_name }}" "${{ steps.set_paths.outputs.zip_file_path }}"
          fi

      - name: Clear destination folder
        run: |
          # Clear the content of the destination folder
          rm -rf "${{ steps.set_paths.outputs.dest_folder }}/*"

      - name: Copy files
        run: |
          mkdir -p "${{ steps.set_paths.outputs.dest_folder }}"                # Ensure the destination folder exists
          cp -r "${{ steps.set_paths.outputs.src_folder }}/." "${{ steps.set_paths.outputs.dest_folder }}/"  # Copy the files from source to destination

      - name: Check if ZIP file exists
        run: |
          if [ -f "${{ steps.set_paths.outputs.zip_file_path }}/${{ steps.set_paths.outputs.zip_file_name }}" ]; then
            echo "ZIP file exists: "${{ steps.set_paths.outputs.zip_file_path }}/${{ steps.set_paths.outputs.zip_file_name }}"" 
          else
            echo "ZIP file not found!"
            exit 1
          fi

      - name: Commit changes before rebase
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add "${{ steps.set_paths.outputs.dest_folder }}/*" "${{ steps.set_paths.outputs.zip_file_path }}/${{ steps.set_paths.outputs.zip_file_name }}"
          git commit -m "Copy files from ${{ steps.set_paths.outputs.src_folder }} to ${{ steps.set_paths.outputs.dest_folder }}, create backup, and clear old content"

      - name: Pull latest changes and rebase
        run: |
          git fetch origin main
          git rebase origin/main        

      - name: Push changes
        run: |
          git push origin HEAD:main  # Pushes detached HEAD changes to `main`